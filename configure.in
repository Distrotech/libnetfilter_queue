dnl Process this file with autoconf to create configure.

AC_INIT
AC_CANONICAL_SYSTEM

AM_INIT_AUTOMAKE(libnfnetlink_queue, 0.10)

AC_PROG_CC
AC_EXEEXT
AM_PROG_LIBTOOL
AC_PROG_INSTALL

AC_SUBST(LIBTOOL_DEPS)

case $target in 
*-*-linux*) ;;
*) AC_MSG_ERROR([Linux only, dude!]);;
esac

AC_CHECK_LIB([nfnetlink], [nfnl_listen])

dnl--------------------------------

AC_DEFUN([NF_KERNEL_SOURCE],[
    
  if test "$with_kernel" = ""; then
    KERNEL="`uname -r`"
  else
    KERNEL="$with_kernel"
  fi

  THIS_PREFIX=""
  for i in "/lib/modules/$KERNEL/build/include" "$KERNEL" "$KERNEL/include" "/usr/src/linux-$KERNEL" "/usr/src/kernel-$KERNEL" "/usr/src/linux-headers-$KERNEL" "/usr/src/kernel-headers-$KERNEL"
  do  
    AC_MSG_CHECKING([Looking for kernel source or headers in $i])
    if test -r "$i/linux/config.h"
    then
      THIS_PREFIX="$i"
      AC_MSG_RESULT([found])
      break
    fi
    AC_MSG_RESULT([ ])    
  done
  if test -r "$THIS_PREFIX/linux/config.h" ; then
    AC_SUBST(KERNELDIR,[$THIS_PREFIX])
    AC_MSG_RESULT([found])
  else
    AC_MSG_ERROR([not found $THIS_PREFIX])  
  fi

  # somehow add this as an include path
])

AC_ARG_WITH(kernel,
               AC_HELP_STRING([--with-kernel=DIR],
                              [ Show location of kernel source. Default is to use uname -r and look in /lib/modules/KERNEL/build/include. ]),
	       NF_KERNEL_SOURCE($with_kernel),NF_KERNEL_SOURCE())

dnl--------------------------------




dnl Output the makefiles
AC_OUTPUT(Makefile include/Makefile include/libnfnetlink_queue/Makefile src/Makefile utils/Makefile)
